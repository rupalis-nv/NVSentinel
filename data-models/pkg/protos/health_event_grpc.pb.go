// Copyright (c) 2025, NVIDIA CORPORATION.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.33.0
// source: health_event.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PlatformConnector_HealthEventOccurredV1_FullMethodName = "/datamodels.PlatformConnector/HealthEventOccurredV1"
)

// PlatformConnectorClient is the client API for PlatformConnector service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PlatformConnectorClient interface {
	HealthEventOccurredV1(ctx context.Context, in *HealthEvents, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type platformConnectorClient struct {
	cc grpc.ClientConnInterface
}

func NewPlatformConnectorClient(cc grpc.ClientConnInterface) PlatformConnectorClient {
	return &platformConnectorClient{cc}
}

func (c *platformConnectorClient) HealthEventOccurredV1(ctx context.Context, in *HealthEvents, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, PlatformConnector_HealthEventOccurredV1_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PlatformConnectorServer is the server API for PlatformConnector service.
// All implementations must embed UnimplementedPlatformConnectorServer
// for forward compatibility.
type PlatformConnectorServer interface {
	HealthEventOccurredV1(context.Context, *HealthEvents) (*emptypb.Empty, error)
	mustEmbedUnimplementedPlatformConnectorServer()
}

// UnimplementedPlatformConnectorServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPlatformConnectorServer struct{}

func (UnimplementedPlatformConnectorServer) HealthEventOccurredV1(context.Context, *HealthEvents) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthEventOccurredV1 not implemented")
}
func (UnimplementedPlatformConnectorServer) mustEmbedUnimplementedPlatformConnectorServer() {}
func (UnimplementedPlatformConnectorServer) testEmbeddedByValue()                           {}

// UnsafePlatformConnectorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PlatformConnectorServer will
// result in compilation errors.
type UnsafePlatformConnectorServer interface {
	mustEmbedUnimplementedPlatformConnectorServer()
}

func RegisterPlatformConnectorServer(s grpc.ServiceRegistrar, srv PlatformConnectorServer) {
	// If the following call pancis, it indicates UnimplementedPlatformConnectorServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PlatformConnector_ServiceDesc, srv)
}

func _PlatformConnector_HealthEventOccurredV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthEvents)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlatformConnectorServer).HealthEventOccurredV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlatformConnector_HealthEventOccurredV1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlatformConnectorServer).HealthEventOccurredV1(ctx, req.(*HealthEvents))
	}
	return interceptor(ctx, in, info, handler)
}

// PlatformConnector_ServiceDesc is the grpc.ServiceDesc for PlatformConnector service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PlatformConnector_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "datamodels.PlatformConnector",
	HandlerType: (*PlatformConnectorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HealthEventOccurredV1",
			Handler:    _PlatformConnector_HealthEventOccurredV1_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "health_event.proto",
}
